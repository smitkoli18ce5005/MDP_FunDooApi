swagger: "2.0"
info:
  title: FunDoo API
  description: fundooNotes
  version: 1.0.0
schemes:
  - http
paths:
  /user:
    get:
      tags:
        - user
      summary: Find all instances of the model.
      description: Returns all instances of users in userModel.
      produces:
        - application/json
      responses:
        200:
          description: Successfully returned all users
        500:
          description: Internal server error
  /user/{id}:
    get:
      tags:
        - user
      summary: Find instance of the model.
      description: Returns instance of user in userModel matching the id.
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          required: true
          type: string
          example: 61379abf74e93d3a37f94ba2
          value: 61379abf74e93d3a37f94ba2
          description: Model id
      responses:
        200:
          description: User found
        404:
          description: User not found
        500:
          description: Internal server error
    delete:
      tags:
        - user
      summary: Delete a model instance by id from the data source.
      description: Deletes the instance of user in userModel matching the provided id.
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          required: true
          type: string
          example: 61379abf74e93d3a37f94ba2
          value: 61379abf74e93d3a37f94ba2
          description: Model id
      responses:
        200:
          description: User deleted
        404:
          description: User not found
        500:
          description: Internal server error
  /user/login:
    post:
      tags:
        - user
      summary: User Login
      description: Login a user with email and password
      produces:
        - application/json
      parameters:
        - in: body
          name: credentials
          required: true
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                example: smit@gmail.com
              password:
                type: string
                example: Smit@123
      responses:
        200:
          description: Successfully logged in
        404:
          description: User not found
        500:
          description: Internal server error
  /user/userSignUp:
    post:
      tags:
        - user
      summary: User Sign Up
      description: Register a user with first name, last name, email and password
      produces:
        - application/json
      parameters:
        - in: body
          name: userData
          required: true
          schema:
            type: object
            required:
              - firstName
              - lastName
              - email
              - password
            properties:
              firstName:
                type: string
                example: Smit
              lastName:
                type: string
                example: Koli
              email:
                type: string
                example: smit@gmail.com
              password:
                type: string
                example: Smit@123
      responses:
        200:
          description: Successfully signed up
        422:
          description: User already exists
        500:
          description: Internal server error
  /notes:
    get:
      tags:
        - notes
      summary: Find all instances of the model.
      description: Returns all instances of notes in notesModel.
      produces:
        - application/json
      responses:
        200:
          description: Successfully returned all notes
        500:
          description: Internal server error
  /notes/{id}:
    patch:
      tags:
        - notes
      summary: Update a model instance by id from the data source.
      description: Updates the instance of note in notesModel matching the provided id.
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          required: true
          type: string
          example: 613876af536bae5d23ee8235
          value: 613876af536bae5d23ee8235
          description: Model id
        - in: body
          name: userData
          required: true
          schema:
            type: object
            required:
              - title
              - description
              - isPinned
              - isArchived
              - color
            properties:
              title:
                type: string
                example: Updated Note
              description:
                type: string
                example: This is your updated note
              isPinned:
                type: boolean
                example: true
              isArchived:
                type: boolean
                example: true
              color:
                type: string
                example: "#ffffff"
      responses:
        200:
          description: Note successfully updated
        422:
          description: Note with same title already exists
        500:
          description: Internal server error
    delete:
      tags:
        - notes
      summary: Delete a model instance by id from the data source.
      description: Deletes the instance of note in notesModel matching the provided id.
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          required: true
          type: string
          example: 61386e54175d6a0438857729
          value: 61386e54175d6a0438857729
          description: Model id
      responses:
        200:
          description: Successfully deleted note
        404:
          description: Note not found
        500:
          description: Internal server error
  /notes/addNotes:
    post:
      tags:
        - notes
      summary: To add notes
      description: Add notes with title, description, isPinned, isArchived and color
      produces:
        - application/json
      parameters:
        - in: body
          name: userData
          required: true
          schema:
            type: object
            required:
              - title
              - description
              - isPinned
              - isArchived
              - color
            properties:
              title:
                type: string
                example: New Note
              description:
                type: string
                example: This is your note
              isPinned:
                type: boolean
                example: false
              isArchived:
                type: boolean
                example: false
              color:
                type: string
                example: #ffffff
      responses:
        200:
          description: Note successfully added
        422:
          description: Note with same title already exists
        500:
          description: Internal server error